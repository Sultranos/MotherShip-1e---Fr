// =============================================================================
// FONCTION UTILITAIRE PARTAG√âE : RECONSTRUCTION DE COMPENDIUM
// =============================================================================
// Fonction g√©n√©rique pour reconstruire un compendium avec donn√©es s√©curis√©es
// Utilis√©e par toutes les macros sp√©cialis√©es de reconstruction
// =============================================================================

/**
 * Fonction g√©n√©rique de reconstruction de compendium
 * @param {string} packId - ID du pack √† reconstruire  
 * @param {Object} donneesSecurisees - Donn√©es hardcod√©es avec IDs pr√©serv√©s
 * @param {string} typeContenu - Type de contenu pour logging
 * @returns {Promise<Object>} R√©sultat de la reconstruction
 */
async function rebuildCompendium(packId, donneesSecurisees, typeContenu) {
    
    console.log(`üì¶ Reconstruction du compendium: ${packId}`);
    console.log(`üìä Type de contenu: ${typeContenu}`);
    
    let rapport = {
        packId: packId,
        typeContenu: typeContenu,
        itemsTotal: Object.keys(donneesSecurisees).length,
        itemsCrees: 0,
        itemsErreurs: 0,
        errors: []
    };
    
    try {
        // V√©rifier l'existence du pack
        const pack = game.packs.get(packId);
        if (!pack) {
            const erreur = `‚ùå Pack '${packId}' introuvable`;
            console.error(erreur);
            rapport.errors.push(erreur);
            return rapport;
        }
        
        console.log(`‚úÖ Pack trouv√©: ${pack.metadata.label}`);
        
        // V√©rifier si le pack est vide ou a besoin de reconstruction
        const existingContent = await pack.getDocuments();
        if (existingContent.length > 0) {
            console.log(`‚ÑπÔ∏è Pack contient d√©j√† ${existingContent.length} √©l√©ments - reconstruction s√©lective`);
        }
        
        // Reconstruction √©l√©ment par √©l√©ment avec IDs pr√©serv√©s
        for (const [originalId, itemData] of Object.entries(donneesSecurisees)) {
            try {
                // V√©rifier si l'√©l√©ment existe d√©j√†
                const existingItem = existingContent.find(item => item.name === itemData.name);
                if (existingItem) {
                    console.log(`‚è≠Ô∏è '${itemData.name}' existe d√©j√† - ignor√©`);
                    continue;
                }
                
                // Cr√©er le document avec l'ID original pr√©serv√©
                const docData = {
                    _id: originalId,
                    ...itemData
                };
                
                const document = await pack.documentClass.create(docData, {
                    pack: packId,
                    keepId: true
                });
                
                if (document) {
                    console.log(`‚úÖ Cr√©√©: '${itemData.name}' [${originalId}]`);
                    rapport.itemsCrees++;
                } else {
                    throw new Error(`√âchec cr√©ation de '${itemData.name}'`);
                }
                
            } catch (error) {
                const errMsg = `‚ùå Erreur cr√©ation '${itemData.name}': ${error.message}`;
                console.error(errMsg);
                rapport.errors.push(errMsg);
                rapport.itemsErreurs++;
            }
        }
        
        // Rapport final
        console.log(`üìã RECONSTRUCTION ${typeContenu.toUpperCase()} TERMIN√âE:`);
        console.log(`   ‚úÖ Cr√©√©s: ${rapport.itemsCrees}`);
        console.log(`   ‚ùå Erreurs: ${rapport.itemsErreurs}`);
        console.log(`   üìä Total: ${rapport.itemsTotal}`);
        
        if (rapport.itemsCrees > 0) {
            ui.notifications.info(`‚úÖ ${typeContenu}: ${rapport.itemsCrees} √©l√©ments cr√©√©s avec succ√®s`);
        }
        
        if (rapport.itemsErreurs > 0) {
            ui.notifications.warn(`‚ö†Ô∏è ${typeContenu}: ${rapport.itemsErreurs} erreurs de cr√©ation`);
        }
        
    } catch (error) {
        const erreurGlobale = `‚ùå Erreur globale reconstruction ${typeContenu}: ${error.message}`;
        console.error(erreurGlobale);
        rapport.errors.push(erreurGlobale);
        ui.notifications.error(`‚ùå √âchec reconstruction ${typeContenu}`);
    }
    
    return rapport;
}

// Export pour utilisation dans les autres macros
window.rebuildCompendium = rebuildCompendium;