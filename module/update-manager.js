/**
 * Gestionnaire de mise √† jour automatique pour Mothership-FR
 * G√®re le reset des LVDB lors des mises √† jour pour √©viter les artefacts
 */
export class UpdateManager {
  static MODULE_NAME = "mothership-fr";
  static VERSION_KEY = "systemVersion";
  
  /**
   * Initialise le gestionnaire de mise √† jour
   */
  static async initialize() {
    console.log("üîÑ Initializing UpdateManager...");
    
    // V√©rifier si c'est une nouvelle installation ou une mise √† jour
    const currentVersion = game.system.version;
    const storedVersion = game.settings.get(this.MODULE_NAME, this.VERSION_KEY) || "0.0.0";
    
    console.log(`üì¶ Version actuelle: ${currentVersion}, Version stock√©e: ${storedVersion}`);
    
    // Si c'est une mise √† jour
    if (this.isVersionNewer(currentVersion, storedVersion)) {
      console.log(`üÜï Mise √† jour d√©tect√©e: ${storedVersion} ‚Üí ${currentVersion}`);
      await this.handleUpdate(storedVersion, currentVersion);
    }
    
    // Mettre √† jour la version stock√©e
    await game.settings.set(this.MODULE_NAME, this.VERSION_KEY, currentVersion);
  }
  
  /**
   * Enregistre les param√®tres n√©cessaires
   */
  static registerSettings() {
    game.settings.register(this.MODULE_NAME, this.VERSION_KEY, {
      name: "Version du syst√®me",
      hint: "Version actuellement install√©e du syst√®me",
      scope: "world",
      config: false,
      type: String,
      default: "0.0.0"
    });
    
    game.settings.register(this.MODULE_NAME, "autoResetLVDB", {
      name: "Reset automatique des LVDB",
      hint: "R√©initialise automatiquement les bases de donn√©es locales lors des mises √† jour",
      scope: "world",
      config: true,
      type: Boolean,
      default: true
    });
  }
  
  /**
   * Compare deux versions et d√©termine si la premi√®re est plus r√©cente
   */
  static isVersionNewer(current, stored) {
    const currentParts = current.split('.').map(Number);
    const storedParts = stored.split('.').map(Number);
    
    for (let i = 0; i < Math.max(currentParts.length, storedParts.length); i++) {
      const currentPart = currentParts[i] || 0;
      const storedPart = storedParts[i] || 0;
      
      if (currentPart > storedPart) return true;
      if (currentPart < storedPart) return false;
    }
    
    return false;
  }
  
  /**
   * G√®re la mise √† jour du syst√®me
   */
  static async handleUpdate(fromVersion, toVersion) {
    console.log(`üîÑ Traitement de la mise √† jour de ${fromVersion} vers ${toVersion}`);
    
    // V√©rifier si l'utilisateur est GM
    if (!game.user.isGM) {
      console.log("üë§ Utilisateur non-GM, pas de reset des LVDB");
      return;
    }
    
    // V√©rifier si le reset automatique est activ√©
    const autoReset = game.settings.get(this.MODULE_NAME, "autoResetLVDB");
    if (!autoReset) {
      console.log("‚öôÔ∏è Reset automatique des LVDB d√©sactiv√©");
      return;
    }
    
    // Afficher une notification de d√©but
    ui.notifications.info(`üîÑ Mise √† jour vers ${toVersion} - Reset des LVDB en cours...`);
    
    try {
      // Reset des LVDB
      await this.resetLVDB();
      
      // Notification de succ√®s
      ui.notifications.info(`‚úÖ Mise √† jour vers ${toVersion} termin√©e avec succ√®s !`);
      
      // Log des changements sp√©cifiques selon la version
      this.logVersionChanges(fromVersion, toVersion);
      
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour:", error);
      ui.notifications.error(`‚ùå Erreur lors de la mise √† jour: ${error.message}`);
    }
  }
  
  /**
   * Reset des bases de donn√©es locales (LVDB)
   */
  static async resetLVDB() {
    console.log("üóëÔ∏è Reset des LVDB...");
    
    // Supprimer les caches des compendiums
    if (window.localforage) {
      try {
        // Vider le cache de localforage utilis√© par FoundryVTT
        await localforage.clear();
        console.log("‚úÖ Cache localforage vid√©");
      } catch (error) {
        console.warn("‚ö†Ô∏è Impossible de vider le cache localforage:", error);
      }
    }
    
    // Forcer le rechargement des compendiums
    for (const pack of game.packs) {
      if (pack.metadata.system === this.MODULE_NAME) {
        try {
          // Vider le cache du compendium
          pack.apps = [];
          pack._source = null;
          pack.index = new Map();
          console.log(`üîÑ Reset du compendium: ${pack.collection}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors du reset du compendium ${pack.collection}:`, error);
        }
      }
    }
    
    // Recharger les packs
    await game.packs.reload();
    console.log("‚úÖ Compendiums recharg√©s");
  }
  
  /**
   * Log des changements sp√©cifiques selon les versions
   */
  static logVersionChanges(fromVersion, toVersion) {
    const changes = {
      "1.1.7": [
        "‚úÖ Correction des r√©f√©rences de compendiums dans classes_1e.db",
        "üîß Mise √† jour des r√©f√©rences fvtt_mosh_1e_psg ‚Üí mothership-fr"
      ],
      "1.1.8": [
        "üîÑ Ajout du gestionnaire de mise √† jour automatique",
        "üóëÔ∏è Reset automatique des LVDB pour √©viter les artefacts",
        "üì¶ Am√©lioration de la stabilit√© des compendiums"
      ]
    };
    
    console.log(`üìã Changements apport√©s en version ${toVersion}:`);
    const versionChanges = changes[toVersion] || ["üîÑ Mise √† jour syst√®me"];
    versionChanges.forEach(change => console.log(`  ${change}`));
  }
  
  /**
   * Force le reset des LVDB manuellement
   */
  static async forceResetLVDB() {
    if (!game.user.isGM) {
      ui.notifications.warn("‚ö†Ô∏è Seul un MJ peut forcer le reset des LVDB");
      return;
    }
    
    const confirm = await Dialog.confirm({
      title: "Reset des LVDB",
      content: "<p>√ätes-vous s√ªr de vouloir r√©initialiser les bases de donn√©es locales ?</p><p><strong>Cette action va vider tous les caches.</strong></p>"
    });
    
    if (!confirm) return;
    
    ui.notifications.info("üîÑ Reset forc√© des LVDB en cours...");
    
    try {
      await this.resetLVDB();
      ui.notifications.info("‚úÖ Reset des LVDB termin√© !");
    } catch (error) {
      console.error("‚ùå Erreur lors du reset forc√©:", error);
      ui.notifications.error(`‚ùå Erreur: ${error.message}`);
    }
  }
}

// Hook pour initialiser le gestionnaire au d√©marrage
Hooks.once('ready', () => {
  UpdateManager.initialize();
});

// Hook pour enregistrer les param√®tres
Hooks.once('init', () => {
  UpdateManager.registerSettings();
});

// Exposer la fonction de reset forc√© globalement
window.forceResetLVDB = () => UpdateManager.forceResetLVDB();